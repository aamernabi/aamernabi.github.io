<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aamer Paul</title>
    <link>https://aamernabi.github.io/</link>
    <description>Recent content on Aamer Paul</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Mar 2024 21:25:32 +0530</lastBuildDate>
    <atom:link href="https://aamernabi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Functional Interface</title>
      <link>https://aamernabi.github.io/posts/java-functional-interface/</link>
      <pubDate>Tue, 26 Mar 2024 21:25:32 +0530</pubDate>
      <guid>https://aamernabi.github.io/posts/java-functional-interface/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Functional interfaces&lt;/strong&gt; in Java are interfaces that contain exactly one abstract method. They are also known as &lt;strong&gt;Single Abstract Method (SAM)&lt;/strong&gt; interfaces. It was introduced in Java 8.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@FunctionalInterface&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyFunctionalInterface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;(String message); &lt;span style=&#34;color:#75715e&#34;&gt;// Single abstract method&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MyFunctionalInterface myLambda &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (msg) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lambda says: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; msg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  myLambda.&lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;consumer-predicate-function-and-supplier&#34;&gt;Consumer, Predicate, Function, and Supplier&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Consumer&lt;/code&gt;, &lt;code&gt;Predicate&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, and &lt;code&gt;Supplier&lt;/code&gt; are key functional interfaces introduced in Java 8 as part of the &lt;code&gt;java.util.function&lt;/code&gt; package. They are widely used in lambda expressions and the Stream API.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AtomicInteger in Java</title>
      <link>https://aamernabi.github.io/posts/atomicinteger/</link>
      <pubDate>Tue, 19 Jan 2021 10:41:26 +0530</pubDate>
      <guid>https://aamernabi.github.io/posts/atomicinteger/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;An &lt;strong&gt;AtomicInteger&lt;/strong&gt; in Java is a class from the &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; package that provides thread-safe operations on a single int value without using synchronization (i.e., synchronized blocks).&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;AtomicInteger solves this by using low-level CPU operations (like compare-and-swap) to ensure updates are atomic.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;get()&lt;/code&gt;: Returns the current value&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;set(int newValue)&lt;/code&gt;: Sets the value&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;incrementAndGet()&lt;/code&gt;: Increments by 1, returns new value&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;getAndIncrement()&lt;/code&gt;: Returns current, then increments by 1&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;addAndGet(int delta)&lt;/code&gt;: Adds delta, returns new value&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;getAndSet(int value)&lt;/code&gt;: Sets to new value, returns old value&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;compareAndSet(expect, update)&lt;/code&gt;: Atomically updates if value matches &lt;code&gt;expect&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;why-do-we-need-atomicinteger&#34;&gt;Why do we need AtomicInteger?&lt;/h3&gt;&#xA;&lt;p&gt;In multithreaded programs, incrementing or updating a simple int variable is not atomic — meaning, two threads&#xA;might interfere with each other.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blocking Queue in Java</title>
      <link>https://aamernabi.github.io/posts/java-blocking-queue/</link>
      <pubDate>Mon, 27 Jul 2020 20:09:10 +0530</pubDate>
      <guid>https://aamernabi.github.io/posts/java-blocking-queue/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;A &lt;code&gt;BlockingQueue&lt;/code&gt; in Java is a &lt;code&gt;thread-safe queue&lt;/code&gt; that supports operations that wait for the queue to become non-empty when retrieving an element (for consuming), and wait for space to become available in the queue when storing an element (for producing).&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;why-do-we-need-blockingqueue&#34;&gt;Why do we need &lt;code&gt;BlockingQueue&lt;/code&gt;?&lt;/h3&gt;&#xA;&lt;p&gt;In multi-threaded applications:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Producers&lt;/strong&gt; add data to a queue.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Consumers&lt;/strong&gt; remove data from the queue.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Instead of manually managing thread synchronization (with &lt;code&gt;wait()&lt;/code&gt; and &lt;code&gt;notify()&lt;/code&gt;), &lt;code&gt;BlockingQueue&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Completable Future in Java</title>
      <link>https://aamernabi.github.io/posts/java-completable-future/</link>
      <pubDate>Mon, 27 Jul 2020 12:09:10 +0530</pubDate>
      <guid>https://aamernabi.github.io/posts/java-completable-future/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompletableFuture&lt;/code&gt;&lt;/strong&gt; is a class introduced in &lt;strong&gt;Java 8&lt;/strong&gt; that represents a future result of an &lt;strong&gt;asynchronous computation&lt;/strong&gt;, just like &lt;code&gt;Future&lt;/code&gt; — but with &lt;strong&gt;more power&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;It allows us to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Run tasks asynchronously&lt;/li&gt;&#xA;&lt;li&gt;Chain multiple tasks together&lt;/li&gt;&#xA;&lt;li&gt;Handle results or errors when they arrive&lt;/li&gt;&#xA;&lt;li&gt;Avoid &lt;strong&gt;blocking&lt;/strong&gt; the main thread&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;It implements both &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;CompletionStage&amp;lt;T&amp;gt;&lt;/code&gt;, offering a much richer API for building asynchronous, non-blocking, and highly composable workflows.&lt;/p&gt;&#xA;&lt;h4 id=&#34;features&#34;&gt;Features&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Non-Blocking:&lt;/strong&gt; It provides methods like &lt;code&gt;thenApply()&lt;/code&gt;, &lt;code&gt;thenAccept()&lt;/code&gt;, and &lt;code&gt;thenRun()&lt;/code&gt; that allow you to define actions to be taken when the result is available without blocking the main thread.&lt;/p&gt;</description>
    </item>
    <item>
      <title>hashcode() in Java</title>
      <link>https://aamernabi.github.io/posts/java-hashcode/</link>
      <pubDate>Sun, 26 Jul 2020 23:03:02 +0530</pubDate>
      <guid>https://aamernabi.github.io/posts/java-hashcode/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;The &lt;code&gt;hashCode()&lt;/code&gt; method provides a way to quickly categorize and retrieve objects by generating a unique (or at least well-distributed) integer for each object. It is part of the Object class, so every class in Java inherits it.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;The &lt;code&gt;hashCode()&lt;/code&gt; is a native method and returns the integer hash code value of the object.&lt;/p&gt;&#xA;&lt;p&gt;A hash code is an integer value that is generated by the &lt;code&gt;hashCode()&lt;/code&gt; method. It’s used primarily in hash-based&#xA;collections like:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fail-fast iterator and Fail-safe iterator</title>
      <link>https://aamernabi.github.io/posts/fail-fast_and_fail-safe_iterator/</link>
      <pubDate>Mon, 20 Jul 2020 15:44:00 +0530</pubDate>
      <guid>https://aamernabi.github.io/posts/fail-fast_and_fail-safe_iterator/</guid>
      <description>&lt;h4 id=&#34;fail-fast-iterator&#34;&gt;Fail-fast iterator&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Fail-Fast iterators immediately throw &lt;strong&gt;ConcurrentModificationException&lt;/strong&gt; if there is &lt;em&gt;&lt;strong&gt;structural modification&lt;/strong&gt;&lt;/em&gt; of&#xA;the collection.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;A fail-fast iterator in Java is designed to immediately throw a&lt;code&gt;ConcurrentModificationException&lt;/code&gt;if the collection it is&#xA;iterating over is structurally modified (elements added or removed) while the iteration is in progress, except when&#xA;modification is done through the iterator&amp;rsquo;s own&lt;code&gt;remove()&lt;/code&gt;method. This behavior helps in detecting concurrent&#xA;modification issues early, preventing potential data corruption or unexpected behavior.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>https://aamernabi.github.io/about/</link>
      <pubDate>Sat, 18 Jul 2020 14:40:14 +0530</pubDate>
      <guid>https://aamernabi.github.io/about/</guid>
      <description>&lt;p&gt;I’m a Software Engineer with 4+ years of experience in designing and building scalable mobile apps.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
