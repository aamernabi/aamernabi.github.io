<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Aamer Paul</title>
        <link>https://aamernabi.github.io/posts/</link>
        <description>Recent content in Posts on Aamer Paul</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 02 Jul 2024 16:25:32 +0530</lastBuildDate>
        <atom:link href="https://aamernabi.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Java Sealed Interface</title>
            <link>https://aamernabi.github.io/posts/java-sealed-interface/</link>
            <pubDate>Tue, 02 Jul 2024 16:25:32 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/java-sealed-interface/</guid>
            <description>&lt;p&gt;A &lt;strong&gt;sealed class&lt;/strong&gt; and &lt;strong&gt;sealed interface&lt;/strong&gt; is a feature introduced in Java 15 (as a preview) and officially released in Java 17.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Sealed classes&lt;/strong&gt; and &lt;strong&gt;interfaces&lt;/strong&gt; provide controlled inheritance of your class hierarchies.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;sealed-class&#34;&gt;Sealed class&lt;/h4&gt;
&lt;p&gt;A &lt;strong&gt;sealed class&lt;/strong&gt; restricts which other classes can inherit from it. This provides better control over the class hierarchy and enhances maintainability, security, and optimization (e.g., for pattern matching).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vehicle&lt;/span&gt; permits Car, Truck {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// class body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, &lt;code&gt;Vehicle&lt;/code&gt; is a &lt;strong&gt;sealed class&lt;/strong&gt;, and only &lt;code&gt;Car&lt;/code&gt; and &lt;code&gt;Truck&lt;/code&gt; are allowed to extend it.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>A <strong>sealed class</strong> and <strong>sealed interface</strong> is a feature introduced in Java 15 (as a preview) and officially released in Java 17.</p>
<blockquote>
<p><strong>Sealed classes</strong> and <strong>interfaces</strong> provide controlled inheritance of your class hierarchies.</p></blockquote>
<h4 id="sealed-class">Sealed class</h4>
<p>A <strong>sealed class</strong> restricts which other classes can inherit from it. This provides better control over the class hierarchy and enhances maintainability, security, and optimization (e.g., for pattern matching).</p>
<p><strong>Syntax</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Vehicle</span> permits Car, Truck {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// class body</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, <code>Vehicle</code> is a <strong>sealed class</strong>, and only <code>Car</code> and <code>Truck</code> are allowed to extend it.</p>
<p>Subclasses must:</p>
<ol>
<li>
<p>Be in the <strong>same module</strong> (or package if not using modules).</p>
</li>
<li>
<p>Explicitly declare themselves as:</p>
<ul>
<li><code>final</code> (no further subclassing),</li>
<li><code>sealed</code> (continue restricting inheritance),</li>
<li>or <code>non-sealed</code> (removes restriction for further subclasses).</li>
</ul>
</li>
</ol>
<p><img src="/sealed-class-in-java.png" alt="image"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Car</span> <span style="color:#66d9ef">extends</span> Vehicle {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// No subclassing allowed</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> non<span style="color:#f92672">-</span><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Truck</span> <span style="color:#66d9ef">extends</span> Vehicle {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Any class can extend Truck</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="sealed-interface">Sealed Interface</h4>
<p>A <strong>sealed interface</strong> restricts which classes or interfaces can implement or extend it.</p>
<p><strong>Syntax</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">Vehicle</span> permits Car, Truck, TwoWheeler {
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">TwoWheeler</span> <span style="color:#66d9ef">extends</span> Vehicle permits Bike {
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">record</span> <span style="color:#a6e22e">Bike</span> (String engine) <span style="color:#66d9ef">implements</span> TwoWheeler {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>Here, <code>Vehicle</code> is a <strong>sealed interface</strong>, and only <code>Car</code>, <code>TwoWheeler</code> and <code>Truck</code> are allowed to implement/extend it.</p>
<p><img src="/sealed-interface-in-java.png" alt="image"></p>
<p>Subclasses must:</p>
<ol>
<li>
<p>Be in the same module (or package if not using modules).</p>
</li>
<li>
<p>Explicitly declare themselves as:</p>
<ul>
<li><code>final</code> (no further subclassing),</li>
<li><code>sealed</code> (continue restricting inheritance),</li>
<li>or <code>non-sealed</code> (removes restriction for further subclasses)</li>
</ul>
</li>
</ol>
<h4 id="example-with-enhanced-switch-example">Example (with enhanced switch example)</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">Vehicle</span> permits Car, Truck, TwoWheeler {
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">record</span> <span style="color:#a6e22e">Car</span>(<span style="color:#66d9ef">int</span> noOfSeats) <span style="color:#66d9ef">implements</span> Vehicle {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">record</span> <span style="color:#a6e22e">Truck</span>(<span style="color:#66d9ef">int</span> noOfSeats, <span style="color:#66d9ef">int</span> maxLoad) <span style="color:#66d9ef">implements</span> Vehicle {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">sealed</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">TwoWheeler</span> <span style="color:#66d9ef">extends</span> Vehicle permits Bike {
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">record</span> <span style="color:#a6e22e">Bike</span> (String engine) <span style="color:#66d9ef">implements</span> TwoWheeler {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Subclasses must:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Be in the same <span style="color:#a6e22e">module</span> (or <span style="color:#f92672">package</span> if not using modules).
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Explicitly declare themselves as:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">final</span> (no further subclassing),
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">sealed</span> (<span style="color:#66d9ef">continue</span> restricting inheritance),
</span></span><span style="display:flex;"><span>or non<span style="color:#f92672">-</span><span style="color:#66d9ef">sealed</span> (removes restriction <span style="color:#66d9ef">for</span> further subclasses)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">VehicleProcessor</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> Vehicle vehicle;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  VehicleProcessor(Vehicle vehicle) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">vehicle</span> <span style="color:#f92672">=</span> vehicle;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">process</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * Switch here is exhastive.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * The switch block must have clauses that deal with all possible values of the selector expression. 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * Also, we don&#39;t need default here, if we specify all the possible input values;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    String message <span style="color:#f92672">=</span> <span style="color:#66d9ef">switch</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">vehicle</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">case</span> Car(<span style="color:#66d9ef">int</span> noOfSeats) <span style="color:#f92672">-&gt;</span> <span style="color:#e6db74">&#34;Car with &#34;</span> <span style="color:#f92672">+</span> noOfSeats <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; seats&#34;</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">case</span> Truck(<span style="color:#66d9ef">int</span> noOfSeats, <span style="color:#66d9ef">int</span> maxLoad) <span style="color:#f92672">-&gt;</span> <span style="color:#e6db74">&#34;Truck with &#34;</span> <span style="color:#f92672">+</span> noOfSeats <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; seats, and max load &#34;</span> <span style="color:#f92672">+</span> maxLoad;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">case</span> TwoWheeler twoWheeler <span style="color:#f92672">-&gt;</span> <span style="color:#e6db74">&#34;It&#39;s two wheeler&#34;</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(message);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Java Functional Interface</title>
            <link>https://aamernabi.github.io/posts/java-functional-interface/</link>
            <pubDate>Tue, 26 Mar 2024 21:25:32 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/java-functional-interface/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Functional interfaces&lt;/strong&gt; in Java are interfaces that contain exactly one abstract method. They are also known as &lt;strong&gt;Single Abstract Method (SAM)&lt;/strong&gt; interfaces. It was introduced in Java 8.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@FunctionalInterface&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyFunctionalInterface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;(String message); &lt;span style=&#34;color:#75715e&#34;&gt;// Single abstract method&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MyFunctionalInterface myLambda &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (msg) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lambda says: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; msg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  myLambda.&lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;consumer-predicate-function-and-supplier&#34;&gt;Consumer, Predicate, Function, and Supplier&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Consumer&lt;/code&gt;, &lt;code&gt;Predicate&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, and &lt;code&gt;Supplier&lt;/code&gt; are key functional interfaces introduced in Java 8 as part of the &lt;code&gt;java.util.function&lt;/code&gt; package. They are widely used in lambda expressions and the Stream API.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p><strong>Functional interfaces</strong> in Java are interfaces that contain exactly one abstract method. They are also known as <strong>Single Abstract Method (SAM)</strong> interfaces. It was introduced in Java 8.</p></blockquote>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@FunctionalInterface</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">MyFunctionalInterface</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">doSomething</span>(String message); <span style="color:#75715e">// Single abstract method</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>  MyFunctionalInterface myLambda <span style="color:#f92672">=</span> (msg) <span style="color:#f92672">-&gt;</span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Lambda says: &#34;</span> <span style="color:#f92672">+</span> msg);
</span></span><span style="display:flex;"><span>  myLambda.<span style="color:#a6e22e">doSomething</span>(<span style="color:#e6db74">&#34;Hello World&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="consumer-predicate-function-and-supplier">Consumer, Predicate, Function, and Supplier</h3>
<p><code>Consumer</code>, <code>Predicate</code>, <code>Function</code>, and <code>Supplier</code> are key functional interfaces introduced in Java 8 as part of the <code>java.util.function</code> package. They are widely used in lambda expressions and the Stream API.</p>
<h4 id="1-consumer">1. <strong>Consumer<!-- raw HTML omitted --></strong></h4>
<p>Performs an operation on a given input <strong>without returning a result</strong>.</p>
<ul>
<li><strong>Signature</strong>: <code>void accept(T t)</code></li>
<li><strong>Use case</strong>: Printing, logging, modifying data.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>  Consumer<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> printer <span style="color:#f92672">=</span> s <span style="color:#f92672">-&gt;</span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(s);
</span></span><span style="display:flex;"><span>  printer.<span style="color:#a6e22e">accept</span>(<span style="color:#e6db74">&#34;Hello, world!&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="2-predicate">2. <strong>Predicate<!-- raw HTML omitted --></strong></h4>
<p>Evaluates a condition on input and <strong>returns a boolean</strong>.</p>
<ul>
<li><strong>Signature</strong>: <code>boolean test(T t)</code></li>
<li><strong>Use case</strong>: Filtering, validation, conditional checks.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>  Predicate<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> isLongerThan5 <span style="color:#f92672">=</span> s <span style="color:#f92672">-&gt;</span> s.<span style="color:#a6e22e">length</span>() <span style="color:#f92672">&gt;</span> 5;
</span></span><span style="display:flex;"><span>  System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(isLongerThan5.<span style="color:#a6e22e">test</span>(<span style="color:#e6db74">&#34;Hello&#34;</span>)); <span style="color:#75715e">// false</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="3-functiont-r">3. <strong>Function&lt;T, R&gt;</strong></h4>
<p>Takes an input and <strong>returns a result</strong>.</p>
<ul>
<li><strong>Signature</strong>: <code>R apply(T t)</code></li>
<li><strong>Use case</strong>: Transformation, mapping, computing.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>  Function<span style="color:#f92672">&lt;</span>String, Integer<span style="color:#f92672">&gt;</span> stringLength <span style="color:#f92672">=</span> s <span style="color:#f92672">-&gt;</span> s.<span style="color:#a6e22e">length</span>();
</span></span><span style="display:flex;"><span>  System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(stringLength.<span style="color:#a6e22e">apply</span>(<span style="color:#e6db74">&#34;Hello&#34;</span>)); <span style="color:#75715e">// 5</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="4-supplier">4. <strong>Supplier<!-- raw HTML omitted --></strong></h4>
<p>Supplies a value <strong>without taking any input</strong>.</p>
<ul>
<li><strong>Signature</strong>: <code>T get()</code></li>
<li><strong>Use case</strong>: Object creation, lazy evaluation, random generation.</li>
</ul>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>  Supplier<span style="color:#f92672">&lt;</span>Double<span style="color:#f92672">&gt;</span> randomSupplier <span style="color:#f92672">=</span> () <span style="color:#f92672">-&gt;</span> Math.<span style="color:#a6e22e">random</span>();
</span></span><span style="display:flex;"><span>  System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(randomSupplier.<span style="color:#a6e22e">get</span>());
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>A Deep Dive into the Java Stream API</title>
            <link>https://aamernabi.github.io/posts/deep-dive-into-java-stream-api/</link>
            <pubDate>Mon, 07 Jun 2021 18:12:23 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/deep-dive-into-java-stream-api/</guid>
            <description>&lt;p&gt;The &lt;strong&gt;Stream API&lt;/strong&gt;, introduced in Java 8, is a powerful tool for processing sequences of elements. It provides a functional approach to working with collections and arrays, allowing for expressive and efficient data manipulation. Streams don&amp;rsquo;t store data; instead, they operate on a data source, such as a &lt;code&gt;Collection&lt;/code&gt; or an array, and enable aggregate operations.&lt;/p&gt;
&lt;h2 id=&#34;core-concepts&#34;&gt;Core Concepts&lt;/h2&gt;
&lt;p&gt;A stream pipeline consists of three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A source&lt;/strong&gt;: Where the stream originates from (e.g., a &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, or array).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zero or more intermediate operations&lt;/strong&gt;: These transform the stream into another stream. Examples include &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, and &lt;code&gt;sorted&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A terminal operation&lt;/strong&gt;: This produces a result or a side-effect, and triggers the execution of the pipeline. Examples include &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;collect&lt;/code&gt;, and &lt;code&gt;reduce&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One of the key features of streams is &lt;strong&gt;laziness&lt;/strong&gt;. Intermediate operations are not executed until a terminal operation is invoked. This allows the Stream API to optimize the execution of the pipeline.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>The <strong>Stream API</strong>, introduced in Java 8, is a powerful tool for processing sequences of elements. It provides a functional approach to working with collections and arrays, allowing for expressive and efficient data manipulation. Streams don&rsquo;t store data; instead, they operate on a data source, such as a <code>Collection</code> or an array, and enable aggregate operations.</p>
<h2 id="core-concepts">Core Concepts</h2>
<p>A stream pipeline consists of three parts:</p>
<ol>
<li><strong>A source</strong>: Where the stream originates from (e.g., a <code>List</code>, <code>Set</code>, or array).</li>
<li><strong>Zero or more intermediate operations</strong>: These transform the stream into another stream. Examples include <code>filter</code>, <code>map</code>, and <code>sorted</code>.</li>
<li><strong>A terminal operation</strong>: This produces a result or a side-effect, and triggers the execution of the pipeline. Examples include <code>forEach</code>, <code>collect</code>, and <code>reduce</code>.</li>
</ol>
<p>One of the key features of streams is <strong>laziness</strong>. Intermediate operations are not executed until a terminal operation is invoked. This allows the Stream API to optimize the execution of the pipeline.</p>
<h2 id="creating-streams">Creating Streams</h2>
<p>There are several ways to create a stream:</p>
<h3 id="from-a-collection">From a Collection</h3>
<p>You can create a stream from any <code>Collection</code> (e.g., <code>List</code>, <code>Set</code>) using the <code>stream()</code> method.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> names <span style="color:#f92672">=</span> Arrays.<span style="color:#a6e22e">asList</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Charlie&#34;</span>);
</span></span><span style="display:flex;"><span>Stream<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameStream <span style="color:#f92672">=</span> names.<span style="color:#a6e22e">stream</span>();
</span></span></code></pre></div><h3 id="from-an-array">From an Array</h3>
<p>You can create a stream from an array using the <code>Arrays.stream()</code> method or <code>Stream.of()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>String<span style="color:#f92672">[]</span> nameArray <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Charlie&#34;</span>};
</span></span><span style="display:flex;"><span>Stream<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameStreamFromArray <span style="color:#f92672">=</span> Arrays.<span style="color:#a6e22e">stream</span>(nameArray);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Stream<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> nameStreamFromOf <span style="color:#f92672">=</span> Stream.<span style="color:#a6e22e">of</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Charlie&#34;</span>);
</span></span></code></pre></div><h3 id="from-a-range-of-numbers">From a Range of Numbers</h3>
<p>The <code>IntStream</code>, <code>LongStream</code>, and <code>DoubleStream</code> interfaces provide methods for creating streams of primitive numeric types.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>IntStream intStream <span style="color:#f92672">=</span> IntStream.<span style="color:#a6e22e">range</span>(1, 5); <span style="color:#75715e">// 1, 2, 3, 4</span>
</span></span><span style="display:flex;"><span>LongStream longStream <span style="color:#f92672">=</span> LongStream.<span style="color:#a6e22e">rangeClosed</span>(1, 5); <span style="color:#75715e">// 1, 2, 3, 4, 5</span>
</span></span></code></pre></div><h3 id="using-streamiterate-and-streamgenerate">Using <code>Stream.iterate()</code> and <code>Stream.generate()</code></h3>
<p>You can also create infinite streams using <code>iterate()</code> and <code>generate()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>Stream<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> evenNumbers <span style="color:#f92672">=</span> Stream.<span style="color:#a6e22e">iterate</span>(0, n <span style="color:#f92672">-&gt;</span> n <span style="color:#f92672">+</span> 2);
</span></span><span style="display:flex;"><span>Stream<span style="color:#f92672">&lt;</span>Double<span style="color:#f92672">&gt;</span> randomNumbers <span style="color:#f92672">=</span> Stream.<span style="color:#a6e22e">generate</span>(Math::random);
</span></span></code></pre></div><p>It&rsquo;s important to use <code>limit()</code> with infinite streams to prevent an infinite loop.</p>
<h2 id="stream-operations">Stream Operations</h2>
<p>Stream operations are divided into two categories: intermediate and terminal.</p>
<h3 id="intermediate-operations">Intermediate Operations</h3>
<p>Intermediate operations return a new stream and are always lazy.</p>
<ul>
<li>
<p><strong><code>filter(Predicate&lt;T&gt;)</code></strong>: Returns a stream consisting of the elements of this stream that match the given predicate.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> names <span style="color:#f92672">=</span> Arrays.<span style="color:#a6e22e">asList</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Charlie&#34;</span>, <span style="color:#e6db74">&#34;Anna&#34;</span>);
</span></span><span style="display:flex;"><span>names.<span style="color:#a6e22e">stream</span>()
</span></span><span style="display:flex;"><span>     .<span style="color:#a6e22e">filter</span>(name <span style="color:#f92672">-&gt;</span> name.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">&#34;A&#34;</span>))
</span></span><span style="display:flex;"><span>     .<span style="color:#a6e22e">forEach</span>(System.<span style="color:#a6e22e">out</span>::println); <span style="color:#75715e">// Alice, Anna</span>
</span></span></code></pre></div></li>
<li>
<p><strong><code>map(Function&lt;T, R&gt;)</code></strong>: Returns a stream consisting of the results of applying the given function to the elements of this stream.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> names <span style="color:#f92672">=</span> Arrays.<span style="color:#a6e22e">asList</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Charlie&#34;</span>);
</span></span><span style="display:flex;"><span>names.<span style="color:#a6e22e">stream</span>()
</span></span><span style="display:flex;"><span>     .<span style="color:#a6e22e">map</span>(String::length)
</span></span><span style="display:flex;"><span>     .<span style="color:#a6e22e">forEach</span>(System.<span style="color:#a6e22e">out</span>::println); <span style="color:#75715e">// 5, 3, 7</span>
</span></span></code></pre></div></li>
<li>
<p><strong><code>flatMap(Function&lt;T, Stream&lt;R&gt;&gt;)</code></strong>: Transforms each element of the stream into a stream of other objects and then flattens all the generated streams into a single stream.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>List<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;&gt;</span> listOfLists <span style="color:#f92672">=</span> Arrays.<span style="color:#a6e22e">asList</span>(
</span></span><span style="display:flex;"><span>    Arrays.<span style="color:#a6e22e">asList</span>(1, 2),
</span></span><span style="display:flex;"><span>    Arrays.<span style="color:#a6e22e">asList</span>(3, 4),
</span></span><span style="display:flex;"><span>    Arrays.<span style="color:#a6e22e">asList</span>(5, 6)
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>listOfLists.<span style="color:#a6e22e">stream</span>()
</span></span><span style="display:flex;"><span>           .<span style="color:#a6e22e">flatMap</span>(List::stream)
</span></span><span style="display:flex;"><span>           .<span style="color:#a6e22e">forEach</span>(System.<span style="color:#a6e22e">out</span>::print); <span style="color:#75715e">// 123456</span>
</span></span></code></pre></div></li>
<li>
<p><strong><code>distinct()</code></strong>: Returns a stream consisting of the distinct elements (according to <code>Object.equals(Object)</code>) of this stream.</p>
</li>
<li>
<p><strong><code>sorted()</code></strong>: Returns a stream consisting of the elements of this stream, sorted according to natural order.</p>
</li>
<li>
<p><strong><code>peek(Consumer&lt;T&gt;)</code></strong>: Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream. This is useful for debugging.</p>
</li>
</ul>
<h3 id="terminal-operations">Terminal Operations</h3>
<p>Terminal operations trigger the stream processing and produce a result.</p>
<ul>
<li>
<p><strong><code>forEach(Consumer&lt;T&gt;)</code></strong>: Performs an action for each element of this stream.</p>
</li>
<li>
<p><strong><code>collect(Collector&lt;T, A, R&gt;)</code></strong>: Performs a mutable reduction operation on the elements of this stream using a <code>Collector</code>. This is one of the most powerful terminal operations.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> names <span style="color:#f92672">=</span> Arrays.<span style="color:#a6e22e">asList</span>(<span style="color:#e6db74">&#34;Alice&#34;</span>, <span style="color:#e6db74">&#34;Bob&#34;</span>, <span style="color:#e6db74">&#34;Charlie&#34;</span>);
</span></span><span style="display:flex;"><span>List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> upperCaseNames <span style="color:#f92672">=</span> names.<span style="color:#a6e22e">stream</span>()
</span></span><span style="display:flex;"><span>                                   .<span style="color:#a6e22e">map</span>(String::toUpperCase)
</span></span><span style="display:flex;"><span>                                   .<span style="color:#a6e22e">collect</span>(Collectors.<span style="color:#a6e22e">toList</span>());
</span></span></code></pre></div></li>
<li>
<p><strong><code>reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></strong>: Performs a reduction on the elements of this stream, using an initial value and an associative accumulation function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> numbers <span style="color:#f92672">=</span> Arrays.<span style="color:#a6e22e">asList</span>(1, 2, 3, 4, 5);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> sum <span style="color:#f92672">=</span> numbers.<span style="color:#a6e22e">stream</span>().<span style="color:#a6e22e">reduce</span>(0, (a, b) <span style="color:#f92672">-&gt;</span> a <span style="color:#f92672">+</span> b); <span style="color:#75715e">// 15</span>
</span></span></code></pre></div></li>
<li>
<p><strong><code>count()</code></strong>: Returns the count of elements in this stream.</p>
</li>
<li>
<p><strong><code>anyMatch(Predicate&lt;T&gt;)</code></strong>, <strong><code>allMatch(Predicate&lt;T&gt;)</code></strong>, <strong><code>noneMatch(Predicate&lt;T&gt;)</code></strong>: These operations check if any, all, or no elements of this stream match the given predicate.</p>
</li>
<li>
<p><strong><code>findFirst()</code></strong>, <strong><code>findAny()</code></strong>: Return an <code>Optional</code> describing the first element of this stream, or an arbitrary element of the stream, respectively.</p>
</li>
</ul>
<h2 id="collectors">Collectors</h2>
<p>The <code>Collectors</code> class provides a set of static factory methods for creating <code>Collector</code> instances.</p>
<ul>
<li><strong><code>toList()</code></strong>, <strong><code>toSet()</code></strong>, <strong><code>toMap()</code></strong>: Collect elements into a <code>List</code>, <code>Set</code>, or <code>Map</code>.</li>
<li><strong><code>joining(CharSequence delimiter)</code></strong>: Joins the elements into a <code>String</code>.</li>
<li><strong><code>groupingBy(Function&lt;T, K&gt;)</code></strong>: Groups elements according to a classification function.</li>
<li><strong><code>partitioningBy(Predicate&lt;T&gt;)</code></strong>: Partitions elements into a <code>Map&lt;Boolean, List&lt;T&gt;&gt;</code> based on a predicate.</li>
</ul>
<h2 id="parallel-streams">Parallel Streams</h2>
<p>You can easily create a parallel stream by calling the <code>parallelStream()</code> method on a collection or by calling the <code>parallel()</code> intermediate method on a stream. This can lead to significant performance improvements for large datasets, as the operations are performed concurrently.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>List<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> numbers <span style="color:#f92672">=</span> Arrays.<span style="color:#a6e22e">asList</span>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> sum <span style="color:#f92672">=</span> numbers.<span style="color:#a6e22e">parallelStream</span>()
</span></span><span style="display:flex;"><span>                 .<span style="color:#a6e22e">mapToInt</span>(Integer::intValue)
</span></span><span style="display:flex;"><span>                 .<span style="color:#a6e22e">sum</span>();
</span></span></code></pre></div><p>However, be mindful of the overhead of parallelism. For small datasets or simple operations, a sequential stream might be faster.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The Java Stream API is a fundamental part of modern Java development. It enables you to write more concise, readable, and potentially more performant code for data processing. By understanding the core concepts of stream creation, intermediate operations, and terminal operations, you can leverage the full power of functional-style programming in Java.</p>
]]></content>
        </item>
        
        <item>
            <title>Thread-Safe Counters in Java: A Deep Dive into AtomicInteger</title>
            <link>https://aamernabi.github.io/posts/thread-safe_counters_in_java_atomicinteger/</link>
            <pubDate>Tue, 19 Jan 2021 10:41:26 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/thread-safe_counters_in_java_atomicinteger/</guid>
            <description>&lt;p&gt;When building multithreaded applications in Java, ensuring data integrity is crucial. A common challenge arises when multiple threads need to update a shared counter. Without proper synchronization, you can encounter race conditions, leading to incorrect results. This is where &lt;code&gt;AtomicInteger&lt;/code&gt; comes to the rescue.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AtomicInteger&lt;/code&gt; is a class from the &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; package that provides a thread-safe way to perform atomic operations on an integer value. Unlike traditional locking mechanisms (e.g., &lt;code&gt;synchronized&lt;/code&gt; blocks), &lt;code&gt;AtomicInteger&lt;/code&gt; uses low-level hardware instructions to achieve thread safety with higher performance.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>When building multithreaded applications in Java, ensuring data integrity is crucial. A common challenge arises when multiple threads need to update a shared counter. Without proper synchronization, you can encounter race conditions, leading to incorrect results. This is where <code>AtomicInteger</code> comes to the rescue.</p>
<p><code>AtomicInteger</code> is a class from the <code>java.util.concurrent.atomic</code> package that provides a thread-safe way to perform atomic operations on an integer value. Unlike traditional locking mechanisms (e.g., <code>synchronized</code> blocks), <code>AtomicInteger</code> uses low-level hardware instructions to achieve thread safety with higher performance.</p>
<h3 id="the-problem-race-conditions-with-standard-integers">The Problem: Race Conditions with Standard Integers</h3>
<p>In a multithreaded environment, incrementing a simple <code>int</code> variable is not an atomic operation. The seemingly simple <code>counter++</code> operation involves three distinct steps:</p>
<ol>
<li><strong>Read:</strong> Read the current value of the counter.</li>
<li><strong>Modify:</strong> Increment the value.</li>
<li><strong>Write:</strong> Write the updated value back to the counter.</li>
</ol>
<p>If two threads execute this operation simultaneously, they might both read the same initial value, increment it, and write back the same result. This leads to &ldquo;lost updates&rdquo; and an incorrect final value.</p>
<h4 id="non-atomic-example">Non-Atomic Example</h4>
<p>The following code demonstrates this problem. We start ten threads, and each thread increments a shared counter 10,000 times. We expect the final value to be 100,000, but the actual result is often lower due to race conditions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.concurrent.atomic.AtomicInteger;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CounterExample</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> counter <span style="color:#f92672">=</span> 0;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> AtomicInteger atomicCounter <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> AtomicInteger(0);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) <span style="color:#66d9ef">throws</span> InterruptedException {
</span></span><span style="display:flex;"><span>        nonAtomicExample();
</span></span><span style="display:flex;"><span>        atomicExample();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">nonAtomicExample</span>() <span style="color:#66d9ef">throws</span> InterruptedException {
</span></span><span style="display:flex;"><span>        counter <span style="color:#f92672">=</span> 0;
</span></span><span style="display:flex;"><span>        Runnable task <span style="color:#f92672">=</span> () <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 10_000; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                counter<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Thread<span style="color:#f92672">[]</span> threads <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread<span style="color:#f92672">[</span>10<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 10; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>            threads<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(task);
</span></span><span style="display:flex;"><span>            threads<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (Thread thread : threads) {
</span></span><span style="display:flex;"><span>            thread.<span style="color:#a6e22e">join</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Non-Atomic Final Counter: &#34;</span> <span style="color:#f92672">+</span> counter);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">atomicExample</span>() <span style="color:#66d9ef">throws</span> InterruptedException {
</span></span><span style="display:flex;"><span>        atomicCounter.<span style="color:#a6e22e">set</span>(0);
</span></span><span style="display:flex;"><span>        Runnable task <span style="color:#f92672">=</span> () <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 10_000; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                atomicCounter.<span style="color:#a6e22e">incrementAndGet</span>(); <span style="color:#75715e">// Atomic operation</span>
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Thread<span style="color:#f92672">[]</span> threads <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread<span style="color:#f92672">[</span>10<span style="color:#f92672">]</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0; i <span style="color:#f92672">&lt;</span> 10; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>            threads<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(task);
</span></span><span style="display:flex;"><span>            threads<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span>.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (Thread thread : threads) {
</span></span><span style="display:flex;"><span>            thread.<span style="color:#a6e22e">join</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Atomic Final Counter: &#34;</span> <span style="color:#f92672">+</span> atomicCounter.<span style="color:#a6e22e">get</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="the-solution-atomicinteger">The Solution: <code>AtomicInteger</code></h3>
<p><code>AtomicInteger</code> solves this problem by providing atomic methods for updating the integer value. These methods use a hardware-level mechanism called <strong>Compare-and-Swap (CAS)</strong>.</p>
<h4 id="how-compare-and-swap-cas-works">How Compare-and-Swap (CAS) Works</h4>
<p>CAS is an atomic instruction that compares the contents of a memory location with a given value and, only if they are the same, modifies the contents of that memory location to a new given value. This is done as a single atomic operation.</p>
<p>The <code>incrementAndGet()</code> method, for example, uses CAS to ensure that the read-modify-write operation is atomic. It repeatedly tries to update the value until it succeeds, preventing race conditions.</p>
<h3 id="common-atomicinteger-methods">Common <code>AtomicInteger</code> Methods</h3>
<p>Here are some of the most commonly used methods in <code>AtomicInteger</code>:</p>
<ul>
<li><code>get()</code>: Returns the current value.</li>
<li><code>set(int newValue)</code>: Sets the value to <code>newValue</code>.</li>
<li><code>incrementAndGet()</code>: Atomically increments the current value by one and returns the new value.</li>
<li><code>getAndIncrement()</code>: Atomically increments the current value by one and returns the old value.</li>
<li><code>decrementAndGet()</code>: Atomically decrements the current value by one and returns the new value.</li>
<li><code>getAndDecrement()</code>: Atomically decrements the current value by one and returns the old value.</li>
<li><code>addAndGet(int delta)</code>: Atomically adds the given value to the current value and returns the new value.</li>
<li><code>getAndSet(int newValue)</code>: Atomically sets to the given value and returns the old value.</li>
<li><code>compareAndSet(int expect, int update)</code>: Atomically sets the value to <code>update</code> if the current value is equal to <code>expect</code>, and returns <code>true</code> if successful.</li>
</ul>
<p>By using <code>AtomicInteger</code>, you can ensure the correctness of your multithreaded code without the performance overhead of traditional synchronization.</p>
]]></content>
        </item>
        
        <item>
            <title>Blocking Queue in Java</title>
            <link>https://aamernabi.github.io/posts/java-blocking-queue/</link>
            <pubDate>Mon, 27 Jul 2020 20:09:10 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/java-blocking-queue/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;BlockingQueue&lt;/code&gt; in Java is a &lt;code&gt;thread-safe queue&lt;/code&gt; that supports operations that wait for the queue to become non-empty when retrieving an element (for consuming), and wait for space to become available in the queue when storing an element (for producing).&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;why-do-we-need-blockingqueue&#34;&gt;Why do we need &lt;code&gt;BlockingQueue&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;In multi-threaded applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Producers&lt;/strong&gt; add data to a queue.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consumers&lt;/strong&gt; remove data from the queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of manually managing thread synchronization (with &lt;code&gt;wait()&lt;/code&gt; and &lt;code&gt;notify()&lt;/code&gt;), &lt;code&gt;BlockingQueue&lt;/code&gt;:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>A <code>BlockingQueue</code> in Java is a <code>thread-safe queue</code> that supports operations that wait for the queue to become non-empty when retrieving an element (for consuming), and wait for space to become available in the queue when storing an element (for producing).</p></blockquote>
<h3 id="why-do-we-need-blockingqueue">Why do we need <code>BlockingQueue</code>?</h3>
<p>In multi-threaded applications:</p>
<ul>
<li><strong>Producers</strong> add data to a queue.</li>
<li><strong>Consumers</strong> remove data from the queue.</li>
</ul>
<p>Instead of manually managing thread synchronization (with <code>wait()</code> and <code>notify()</code>), <code>BlockingQueue</code>:</p>
<ul>
<li>Automatically <strong>blocks</strong> producers if the queue is full.</li>
<li>Automatically <strong>blocks</strong> consumers if the queue is empty.</li>
</ul>
<p>This simplifies code and reduces the risk of concurrency bugs.</p>
<p>The BlockingQueue acts as the coordinator between the producer and consumer threads, wrapping a list implementation together with thread signaling. The list contains a configurable number of elements that the producing threads fill with arbitrary data messages. On the other side, the consumer threads extract the messages in the order that they were enqueued and then process them. Coordination between the producers and consumers is necessary if they get out of sync, for example, if the producers hand off more messages than the consumers can handle. So BlockingQueue uses thread conditions to ensure that producers cannot enqueue new messages if the BlockingQueue list is full, and that consumers know when there are messages to fetch. Synchronization between the threads can be achieved with thread signaling, as Example: Consumer and Producer shows. But the BlockingQueue both blocks threads and signals the important state changes—i.e., the list is not full and the list is not empty.</p>
<h3 id="example-producer-consumer-with-blockingqueue">Example: Producer-Consumer with BlockingQueue</h3>
<p>The producer-consumer pattern implemented with the LinkedBlockingQueue-implementation is easily implemented by adding
messages to the queue with put(), and removing them with take(), where put() blocks the caller if the queue is full, and
take() blocks the caller if the queue is empty:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.concurrent.*;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BlockingQueueExample</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>    BlockingQueue<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> queue <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedBlockingQueue<span style="color:#f92672">&lt;&gt;</span>(5); <span style="color:#75715e">// Fixed size queue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Producer thread</span>
</span></span><span style="display:flex;"><span>    Thread producer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 1; i <span style="color:#f92672">&lt;=</span> 10; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>          String item <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Item &#34;</span> <span style="color:#f92672">+</span> i;
</span></span><span style="display:flex;"><span>          System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Producing: &#34;</span> <span style="color:#f92672">+</span> item);
</span></span><span style="display:flex;"><span>          queue.<span style="color:#a6e22e">put</span>(item);  <span style="color:#75715e">// blocks if queue is full</span>
</span></span><span style="display:flex;"><span>          Thread.<span style="color:#a6e22e">sleep</span>(500);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>        Thread.<span style="color:#a6e22e">currentThread</span>().<span style="color:#a6e22e">interrupt</span>();
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Consumer thread</span>
</span></span><span style="display:flex;"><span>    Thread consumer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 1; i <span style="color:#f92672">&lt;=</span> 10; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>          String item <span style="color:#f92672">=</span> queue.<span style="color:#a6e22e">take</span>(); <span style="color:#75715e">// blocks if queue is empty</span>
</span></span><span style="display:flex;"><span>          System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Consuming: &#34;</span> <span style="color:#f92672">+</span> item);
</span></span><span style="display:flex;"><span>          Thread.<span style="color:#a6e22e">sleep</span>(1000);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>        Thread.<span style="color:#a6e22e">currentThread</span>().<span style="color:#a6e22e">interrupt</span>();
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    producer.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>    consumer.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="implementations-of-blockingqueue">Implementations of <code>BlockingQueue</code>:</h3>
<ul>
<li><code>ArrayBlockingQueue</code>: Bounded, backed by an array</li>
<li><code>LinkedBlockingQueue</code>: Optional capacity limit, uses linked nodes</li>
<li><code>PriorityBlockingQueue</code>: Elements are ordered using priority</li>
<li><code>DelayQueue</code>: Elements become available after a delay</li>
<li><code>SynchronousQueue</code>: No internal capacity — handoff queue</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Completable Future in Java</title>
            <link>https://aamernabi.github.io/posts/java-completable-future/</link>
            <pubDate>Mon, 27 Jul 2020 12:09:10 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/java-completable-future/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompletableFuture&lt;/code&gt;&lt;/strong&gt; is a class introduced in &lt;strong&gt;Java 8&lt;/strong&gt; that represents a future result of an &lt;strong&gt;asynchronous computation&lt;/strong&gt;, just like &lt;code&gt;Future&lt;/code&gt; — but with &lt;strong&gt;more power&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It allows us to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run tasks asynchronously&lt;/li&gt;
&lt;li&gt;Chain multiple tasks together&lt;/li&gt;
&lt;li&gt;Handle results or errors when they arrive&lt;/li&gt;
&lt;li&gt;Avoid &lt;strong&gt;blocking&lt;/strong&gt; the main thread&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It implements both &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;CompletionStage&amp;lt;T&amp;gt;&lt;/code&gt;, offering a much richer API for building asynchronous, non-blocking, and highly composable workflows.&lt;/p&gt;
&lt;h4 id=&#34;features&#34;&gt;Features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Non-Blocking:&lt;/strong&gt; It provides methods like &lt;code&gt;thenApply()&lt;/code&gt;, &lt;code&gt;thenAccept()&lt;/code&gt;, and &lt;code&gt;thenRun()&lt;/code&gt; that allow you to define actions to be taken when the result is available without blocking the main thread.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p><strong><code>CompletableFuture</code></strong> is a class introduced in <strong>Java 8</strong> that represents a future result of an <strong>asynchronous computation</strong>, just like <code>Future</code> — but with <strong>more power</strong>.</p></blockquote>
<p>It allows us to:</p>
<ul>
<li>Run tasks asynchronously</li>
<li>Chain multiple tasks together</li>
<li>Handle results or errors when they arrive</li>
<li>Avoid <strong>blocking</strong> the main thread</li>
</ul>
<p>It implements both <code>Future&lt;T&gt;</code> and <code>CompletionStage&lt;T&gt;</code>, offering a much richer API for building asynchronous, non-blocking, and highly composable workflows.</p>
<h4 id="features">Features</h4>
<ul>
<li>
<p><strong>Non-Blocking:</strong> It provides methods like <code>thenApply()</code>, <code>thenAccept()</code>, and <code>thenRun()</code> that allow you to define actions to be taken when the result is available without blocking the main thread.</p>
</li>
<li>
<p><strong>Powerful Composition:</strong> Offers methods like <code>thenCompose()</code>, <code>thenCombine()</code>, and <code>allOf()</code> for chaining and combining multiple asynchronous operations.</p>
</li>
<li>
<p><strong>Enhanced Exception Handling:</strong> Includes mechanisms for handling exceptions that occur during asynchronous operations, making it more robust.</p>
</li>
<li>
<p><strong>Explicit Completion:</strong> Allows you to complete a CompletableFuture programmatically, even if the underlying computation hasn&rsquo;t finished, enabling scenarios where results can be provided prematurely.</p>
</li>
</ul>
<h4 id="methods-of-completablefuture">Methods of CompletableFuture</h4>
<table>
  <thead>
      <tr>
          <th>Method</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>supplyAsync(Supplier)</code></td>
          <td>Runs a task asynchronously that returns a result.</td>
      </tr>
      <tr>
          <td><code>runAsync(Runnable)</code></td>
          <td>Runs a task asynchronously that doesn&rsquo;t return a result.</td>
      </tr>
      <tr>
          <td><code>thenApply(Function)</code></td>
          <td>Transforms the result of a computation.</td>
      </tr>
      <tr>
          <td><code>thenAccept(Consumer)</code></td>
          <td>Consumes the result of a computation.</td>
      </tr>
      <tr>
          <td><code>thenRun(Runnable)</code></td>
          <td>Runs a task after the future is completed.</td>
      </tr>
      <tr>
          <td><code>thenCombine()</code></td>
          <td>Combines two futures when both are done.</td>
      </tr>
      <tr>
          <td><code>exceptionally(Function)</code></td>
          <td>Provides a fallback result in case of an error.</td>
      </tr>
      <tr>
          <td><code>join()</code></td>
          <td>Waits for completion and returns the result (throws unchecked exception).</td>
      </tr>
      <tr>
          <td><code>get()</code></td>
          <td>Similar to <code>join()</code> but throws checked exceptions.</td>
      </tr>
  </tbody>
</table>
<h4 id="how-does-completablefuture-work">How Does <code>CompletableFuture</code> Work?</h4>
<ol>
<li>
<p><strong>Runs Tasks Asynchronously</strong></p>
<ul>
<li>When you call methods like <code>supplyAsync()</code>, <code>runAsync()</code>, etc., <code>CompletableFuture</code> schedules your task to run on a <strong>different thread</strong> (usually from the ForkJoinPool or a custom executor).</li>
<li>This means your main thread <strong>doesn’t block</strong> and can keep doing other things.</li>
</ul>
</li>
<li>
<p><strong>Supports Chaining and Callbacks</strong></p>
<ul>
<li>You can attach <strong>callbacks</strong> to run <strong>after</strong> the first task completes, using methods like <code>thenApply()</code>, <code>thenAccept()</code>, <code>thenRun()</code>.</li>
<li>Each callback gets triggered <strong>only when the previous task finishes</strong>, forming a chain of asynchronous steps.</li>
</ul>
</li>
<li>
<p><strong>Handles Results and Exceptions</strong></p>
<ul>
<li><code>CompletableFuture</code> keeps track of the result or exception internally.</li>
<li>When a task completes, it stores the <strong>result</strong> or <strong>exception</strong> and automatically calls any dependent callbacks.</li>
<li>If an exception occurs, you can handle it with methods like <code>exceptionally()</code> or <code>handle()</code> without blocking.</li>
</ul>
</li>
<li>
<p><strong>Combines Multiple Futures</strong></p>
<ul>
<li>It allows you to combine multiple <code>CompletableFutures</code> using methods like <code>thenCombine()</code>, <code>allOf()</code>, <code>anyOf()</code>.</li>
<li>This helps coordinate many async tasks and proceed when all or any are done.</li>
</ul>
</li>
</ol>
<h4 id="example">Example</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">example</span>() {
</span></span><span style="display:flex;"><span>    CompletableFuture<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> future <span style="color:#f92672">=</span> CompletableFuture.<span style="color:#a6e22e">supplyAsync</span>(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            delay(1000);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Hello&#34;</span>;
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">thenApply</span>(result <span style="color:#f92672">-&gt;</span> result <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; World!&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    future.<span style="color:#a6e22e">thenRun</span>(() <span style="color:#f92672">-&gt;</span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;thenRun : thread = &#34;</span> <span style="color:#f92672">+</span> Thread.<span style="color:#a6e22e">currentThread</span>().<span style="color:#a6e22e">getName</span>()));
</span></span><span style="display:flex;"><span>    future.<span style="color:#a6e22e">thenAccept</span>(result <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>        System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;thenAccept : thread = &#34;</span> <span style="color:#f92672">+</span> Thread.<span style="color:#a6e22e">currentThread</span>().<span style="color:#a6e22e">getName</span>());
</span></span><span style="display:flex;"><span>        System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Result = &#34;</span> <span style="color:#f92672">+</span> result);
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    future.<span style="color:#a6e22e">join</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>hashcode() in Java</title>
            <link>https://aamernabi.github.io/posts/java-hashcode/</link>
            <pubDate>Sun, 26 Jul 2020 23:03:02 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/java-hashcode/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;hashCode()&lt;/code&gt; method provides a way to quickly categorize and retrieve objects by generating a unique (or at least well-distributed) integer for each object. It is part of the Object class, so every class in Java inherits it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;hashCode()&lt;/code&gt; is a native method and returns the integer hash code value of the object.&lt;/p&gt;
&lt;p&gt;A hash code is an integer value that is generated by the &lt;code&gt;hashCode()&lt;/code&gt; method. It’s used primarily in hash-based
collections like:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>The <code>hashCode()</code> method provides a way to quickly categorize and retrieve objects by generating a unique (or at least well-distributed) integer for each object. It is part of the Object class, so every class in Java inherits it.</p></blockquote>
<p>The <code>hashCode()</code> is a native method and returns the integer hash code value of the object.</p>
<p>A hash code is an integer value that is generated by the <code>hashCode()</code> method. It’s used primarily in hash-based
collections like:</p>
<ul>
<li><code>HashMap</code></li>
<li><code>HashSet</code></li>
<li><code>Hashtable</code></li>
</ul>
<h3 id="relationship-with-equals">Relationship with equals()</h3>
<p>When you override <code>equals()</code>, you should also override <code>hashCode()</code>, to maintain the general contract:</p>
<blockquote>
<p>If two objects are equal according to the equals() method, they must have the same hash code.</p></blockquote>
<p>If this rule is broken, collections like HashMap or HashSet won’t work correctly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.Objects;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span> {
</span></span><span style="display:flex;"><span>  String name;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> age;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Person</span>(String name, <span style="color:#66d9ef">int</span> age) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> age;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Override equals</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">equals</span>(Object o) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span> <span style="color:#f92672">==</span> o) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(o <span style="color:#66d9ef">instanceof</span> Person)) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>    Person person <span style="color:#f92672">=</span> (Person) o;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> age <span style="color:#f92672">==</span> person.<span style="color:#a6e22e">age</span> <span style="color:#f92672">&amp;&amp;</span> name.<span style="color:#a6e22e">equals</span>(person.<span style="color:#a6e22e">name</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Override hashCode</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">hashCode</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Objects.<span style="color:#a6e22e">hash</span>(name, age);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="why-its-required-to-override-the-hashcode-when-overriding-the-equals-method">Why its required to override the hashcode when overriding the equals method?</h3>
<p>Imagine using <code>HashMap&lt;Key, String&gt;</code> — if <code>equals()</code> says two keys are equal but they have different hash codes,
the map may store them both — which is wrong behavior for a set.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Key</span> {
</span></span><span style="display:flex;"><span>    String id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Key(String id) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> id;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">equals</span>(Object o) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span> <span style="color:#f92672">==</span> o) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(o <span style="color:#66d9ef">instanceof</span> Key)) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>        Key key <span style="color:#f92672">=</span> (Key) o;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> id.<span style="color:#a6e22e">equals</span>(key.<span style="color:#a6e22e">id</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// hashCode is NOT overridden</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> agrs) {
</span></span><span style="display:flex;"><span>  Map<span style="color:#f92672">&lt;</span>Key, String<span style="color:#f92672">&gt;</span> map <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>  map.<span style="color:#a6e22e">put</span>(<span style="color:#66d9ef">new</span> Key(<span style="color:#e6db74">&#34;a&#34;</span>), <span style="color:#e6db74">&#34;value&#34;</span>);
</span></span><span style="display:flex;"><span>  map.<span style="color:#a6e22e">put</span>(<span style="color:#66d9ef">new</span> Key(<span style="color:#e6db74">&#34;a&#34;</span>), <span style="color:#e6db74">&#34;value&#34;</span>);
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Map size: &#34;</span> <span style="color:#f92672">+</span> map.<span style="color:#a6e22e">size</span>());  <span style="color:#75715e">// Output: 2  -&gt; Incorrect behavior</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>What’s wrong here?</p>
<ul>
<li>You’ve overridden equals() to say that two Key(&ldquo;a&rdquo;) objects are equal.</li>
<li>But hashCode() is not overridden, so each Key(&ldquo;a&rdquo;) gets a different hash code (based on object reference).</li>
<li>The map stores them in different buckets, thinking they are different keys.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Fail-fast iterator and Fail-safe iterator</title>
            <link>https://aamernabi.github.io/posts/fail-fast_and_fail-safe_iterator/</link>
            <pubDate>Mon, 20 Jul 2020 15:44:00 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/fail-fast_and_fail-safe_iterator/</guid>
            <description>&lt;h4 id=&#34;fail-fast-iterator&#34;&gt;Fail-fast iterator&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Fail-Fast iterators immediately throw &lt;strong&gt;ConcurrentModificationException&lt;/strong&gt; if there is &lt;em&gt;&lt;strong&gt;structural modification&lt;/strong&gt;&lt;/em&gt; of
the collection.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;A fail-fast iterator in Java is designed to immediately throw a&lt;code&gt;ConcurrentModificationException&lt;/code&gt;if the collection it is
iterating over is structurally modified (elements added or removed) while the iteration is in progress, except when
modification is done through the iterator&amp;rsquo;s own&lt;code&gt;remove()&lt;/code&gt;method. This behavior helps in detecting concurrent
modification issues early, preventing potential data corruption or unexpected behavior.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h4 id="fail-fast-iterator">Fail-fast iterator</h4>
<blockquote>
<p>Fail-Fast iterators immediately throw <strong>ConcurrentModificationException</strong> if there is <em><strong>structural modification</strong></em> of
the collection.</p></blockquote>
<p>A fail-fast iterator in Java is designed to immediately throw a<code>ConcurrentModificationException</code>if the collection it is
iterating over is structurally modified (elements added or removed) while the iteration is in progress, except when
modification is done through the iterator&rsquo;s own<code>remove()</code>method. This behavior helps in detecting concurrent
modification issues early, preventing potential data corruption or unexpected behavior.</p>
<p>Fail-fast iterators work by maintaining a modification counter (<code>modCount</code>) within the collection. Each time the
collection is structurally modified, the<code>modCount</code>is incremented. When an iterator is created, it records the current
value of<code>modCount</code>. Before each iteration (e.g., in the<code>next()</code>method), the iterator checks if the current<code>modCount</code>of
the collection matches the recorded value. If they differ, it indicates that the collection has been modified since the
iterator was created, and a<code>ConcurrentModificationException</code>is thrown.</p>
<p>Iterator on ArrayList, HashMap classes are some examples of fail-fast Iterator.</p>
<p>Examples of collections in Java that use fail-fast iterators include<code>ArrayList</code>,<code>HashMap</code>, and<code>HashSet</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>  List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> list <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;</span>(Arrays.<span style="color:#a6e22e">asList</span>(<span style="color:#e6db74">&#34;A&#34;</span>, <span style="color:#e6db74">&#34;B&#34;</span>, <span style="color:#e6db74">&#34;C&#34;</span>));
</span></span><span style="display:flex;"><span>  Iterator<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> iterator <span style="color:#f92672">=</span> list.<span style="color:#a6e22e">iterator</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> (iterator.<span style="color:#a6e22e">hasNext</span>()) {
</span></span><span style="display:flex;"><span>    String element <span style="color:#f92672">=</span> iterator.<span style="color:#a6e22e">next</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (element.<span style="color:#a6e22e">equals</span>(<span style="color:#e6db74">&#34;B&#34;</span>)) {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        list.<span style="color:#a6e22e">remove</span>(<span style="color:#e6db74">&#34;C&#34;</span>); <span style="color:#75715e">// Structural modification outside iterator</span>
</span></span><span style="display:flex;"><span>      } <span style="color:#66d9ef">catch</span> (ConcurrentModificationException e) {
</span></span><span style="display:flex;"><span>        System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Exception: &#34;</span> <span style="color:#f92672">+</span> e);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the example above, attempting to modify the<code>list</code>while iterating through it using the iterator will result in a
<code>ConcurrentModificationException</code>.</p>
<h4 id="fail-safe-iterator">Fail-safe Iterator</h4>
<blockquote>
<p><strong>Fail-Safe iterators</strong> don’t throw any exceptions if a collection is structurally modified while iterating over it.</p></blockquote>
<p>This is because, they operate on the <em><strong>clone</strong></em> of the collection, not on the original collection and that’s why they
are called fail-safe iterators. Iterator on <code>CopyOnWriteArrayList</code>, <code>ConcurrentHashMap</code> classes are examples of fail-safe
Iterator.</p>
]]></content>
        </item>
        
    </channel>
</rss>
