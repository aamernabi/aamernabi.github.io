<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Aamer Paul</title>
        <link>https://aamernabi.github.io/posts/</link>
        <description>Recent content in Posts on Aamer Paul</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 27 Jul 2020 20:09:10 +0530</lastBuildDate>
        <atom:link href="https://aamernabi.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Blocking Queue in Java</title>
            <link>https://aamernabi.github.io/posts/java-blocking-queue/</link>
            <pubDate>Mon, 27 Jul 2020 20:09:10 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/java-blocking-queue/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;BlockingQueue&lt;/code&gt; in Java is a &lt;code&gt;thread-safe queue&lt;/code&gt; that supports operations that wait for the queue to become non-empty when retrieving an element (for consuming), and wait for space to become available in the queue when storing an element (for producing).&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;why-do-we-need-blockingqueue&#34;&gt;Why do we need &lt;code&gt;BlockingQueue&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;In multi-threaded applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Producers&lt;/strong&gt; add data to a queue.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consumers&lt;/strong&gt; remove data from the queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of manually managing thread synchronization (with &lt;code&gt;wait()&lt;/code&gt; and &lt;code&gt;notify()&lt;/code&gt;), &lt;code&gt;BlockingQueue&lt;/code&gt;:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>A <code>BlockingQueue</code> in Java is a <code>thread-safe queue</code> that supports operations that wait for the queue to become non-empty when retrieving an element (for consuming), and wait for space to become available in the queue when storing an element (for producing).</p></blockquote>
<h3 id="why-do-we-need-blockingqueue">Why do we need <code>BlockingQueue</code>?</h3>
<p>In multi-threaded applications:</p>
<ul>
<li><strong>Producers</strong> add data to a queue.</li>
<li><strong>Consumers</strong> remove data from the queue.</li>
</ul>
<p>Instead of manually managing thread synchronization (with <code>wait()</code> and <code>notify()</code>), <code>BlockingQueue</code>:</p>
<ul>
<li>Automatically <strong>blocks</strong> producers if the queue is full.</li>
<li>Automatically <strong>blocks</strong> consumers if the queue is empty.</li>
</ul>
<p>This simplifies code and reduces the risk of concurrency bugs.</p>
<p>The BlockingQueue acts as the coordinator between the producer and consumer threads, wrapping a list implementation together with thread signaling. The list contains a configurable number of elements that the producing threads fill with arbitrary data messages. On the other side, the consumer threads extract the messages in the order that they were enqueued and then process them. Coordination between the producers and consumers is necessary if they get out of sync, for example, if the producers hand off more messages than the consumers can handle. So BlockingQueue uses thread conditions to ensure that producers cannot enqueue new messages if the BlockingQueue list is full, and that consumers know when there are messages to fetch. Synchronization between the threads can be achieved with thread signaling, as Example: Consumer and Producer shows. But the BlockingQueue both blocks threads and signals the important state changes—i.e., the list is not full and the list is not empty.</p>
<h3 id="example-producer-consumer-with-blockingqueue">Example: Producer-Consumer with BlockingQueue</h3>
<p>The producer-consumer pattern implemented with the LinkedBlockingQueue-implementation is easily implemented by adding
messages to the queue with put(), and removing them with take(), where put() blocks the caller if the queue is full, and
take() blocks the caller if the queue is empty:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.concurrent.*;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BlockingQueueExample</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>    BlockingQueue<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> queue <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedBlockingQueue<span style="color:#f92672">&lt;&gt;</span>(5); <span style="color:#75715e">// Fixed size queue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Producer thread</span>
</span></span><span style="display:flex;"><span>    Thread producer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 1; i <span style="color:#f92672">&lt;=</span> 10; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>          String item <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Item &#34;</span> <span style="color:#f92672">+</span> i;
</span></span><span style="display:flex;"><span>          System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Producing: &#34;</span> <span style="color:#f92672">+</span> item);
</span></span><span style="display:flex;"><span>          queue.<span style="color:#a6e22e">put</span>(item);  <span style="color:#75715e">// blocks if queue is full</span>
</span></span><span style="display:flex;"><span>          Thread.<span style="color:#a6e22e">sleep</span>(500);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>        Thread.<span style="color:#a6e22e">currentThread</span>().<span style="color:#a6e22e">interrupt</span>();
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Consumer thread</span>
</span></span><span style="display:flex;"><span>    Thread consumer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 1; i <span style="color:#f92672">&lt;=</span> 10; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>          String item <span style="color:#f92672">=</span> queue.<span style="color:#a6e22e">take</span>(); <span style="color:#75715e">// blocks if queue is empty</span>
</span></span><span style="display:flex;"><span>          System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Consuming: &#34;</span> <span style="color:#f92672">+</span> item);
</span></span><span style="display:flex;"><span>          Thread.<span style="color:#a6e22e">sleep</span>(1000);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      } <span style="color:#66d9ef">catch</span> (InterruptedException e) {
</span></span><span style="display:flex;"><span>        Thread.<span style="color:#a6e22e">currentThread</span>().<span style="color:#a6e22e">interrupt</span>();
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    producer.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>    consumer.<span style="color:#a6e22e">start</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="implementations-of-blockingqueue">Implementations of <code>BlockingQueue</code>:</h3>
<ul>
<li><code>ArrayBlockingQueue</code>: Bounded, backed by an array</li>
<li><code>LinkedBlockingQueue</code>: Optional capacity limit, uses linked nodes</li>
<li><code>PriorityBlockingQueue</code>: Elements are ordered using priority</li>
<li><code>DelayQueue</code>: Elements become available after a delay</li>
<li><code>SynchronousQueue</code>: No internal capacity — handoff queue</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Completable Future in Java</title>
            <link>https://aamernabi.github.io/posts/java-completable-future/</link>
            <pubDate>Mon, 27 Jul 2020 12:09:10 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/java-completable-future/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompletableFuture&lt;/code&gt;&lt;/strong&gt; is a class introduced in &lt;strong&gt;Java 8&lt;/strong&gt; that represents a future result of an &lt;strong&gt;asynchronous computation&lt;/strong&gt;, just like &lt;code&gt;Future&lt;/code&gt; — but with &lt;strong&gt;more power&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It allows us to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run tasks asynchronously&lt;/li&gt;
&lt;li&gt;Chain multiple tasks together&lt;/li&gt;
&lt;li&gt;Handle results or errors when they arrive&lt;/li&gt;
&lt;li&gt;Avoid &lt;strong&gt;blocking&lt;/strong&gt; the main thread&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It implements both &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;CompletionStage&amp;lt;T&amp;gt;&lt;/code&gt;, offering a much richer API for building asynchronous, non-blocking, and highly composable workflows.&lt;/p&gt;
&lt;h4 id=&#34;features&#34;&gt;Features&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Non-Blocking:&lt;/strong&gt; It provides methods like &lt;code&gt;thenApply()&lt;/code&gt;, &lt;code&gt;thenAccept()&lt;/code&gt;, and &lt;code&gt;thenRun()&lt;/code&gt; that allow you to define actions to be taken when the result is available without blocking the main thread.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p><strong><code>CompletableFuture</code></strong> is a class introduced in <strong>Java 8</strong> that represents a future result of an <strong>asynchronous computation</strong>, just like <code>Future</code> — but with <strong>more power</strong>.</p></blockquote>
<p>It allows us to:</p>
<ul>
<li>Run tasks asynchronously</li>
<li>Chain multiple tasks together</li>
<li>Handle results or errors when they arrive</li>
<li>Avoid <strong>blocking</strong> the main thread</li>
</ul>
<p>It implements both <code>Future&lt;T&gt;</code> and <code>CompletionStage&lt;T&gt;</code>, offering a much richer API for building asynchronous, non-blocking, and highly composable workflows.</p>
<h4 id="features">Features</h4>
<ul>
<li>
<p><strong>Non-Blocking:</strong> It provides methods like <code>thenApply()</code>, <code>thenAccept()</code>, and <code>thenRun()</code> that allow you to define actions to be taken when the result is available without blocking the main thread.</p>
</li>
<li>
<p><strong>Powerful Composition:</strong> Offers methods like <code>thenCompose()</code>, <code>thenCombine()</code>, and <code>allOf()</code> for chaining and combining multiple asynchronous operations.</p>
</li>
<li>
<p><strong>Enhanced Exception Handling:</strong> Includes mechanisms for handling exceptions that occur during asynchronous operations, making it more robust.</p>
</li>
<li>
<p><strong>Explicit Completion:</strong> Allows you to complete a CompletableFuture programmatically, even if the underlying computation hasn&rsquo;t finished, enabling scenarios where results can be provided prematurely.</p>
</li>
</ul>
<h4 id="methods-of-completablefuture">Methods of CompletableFuture</h4>
<table>
  <thead>
      <tr>
          <th>Method</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>supplyAsync(Supplier)</code></td>
          <td>Runs a task asynchronously that returns a result.</td>
      </tr>
      <tr>
          <td><code>runAsync(Runnable)</code></td>
          <td>Runs a task asynchronously that doesn&rsquo;t return a result.</td>
      </tr>
      <tr>
          <td><code>thenApply(Function)</code></td>
          <td>Transforms the result of a computation.</td>
      </tr>
      <tr>
          <td><code>thenAccept(Consumer)</code></td>
          <td>Consumes the result of a computation.</td>
      </tr>
      <tr>
          <td><code>thenRun(Runnable)</code></td>
          <td>Runs a task after the future is completed.</td>
      </tr>
      <tr>
          <td><code>thenCombine()</code></td>
          <td>Combines two futures when both are done.</td>
      </tr>
      <tr>
          <td><code>exceptionally(Function)</code></td>
          <td>Provides a fallback result in case of an error.</td>
      </tr>
      <tr>
          <td><code>join()</code></td>
          <td>Waits for completion and returns the result (throws unchecked exception).</td>
      </tr>
      <tr>
          <td><code>get()</code></td>
          <td>Similar to <code>join()</code> but throws checked exceptions.</td>
      </tr>
  </tbody>
</table>
<h4 id="how-does-completablefuture-work">How Does <code>CompletableFuture</code> Work?</h4>
<ol>
<li>
<p><strong>Runs Tasks Asynchronously</strong></p>
<ul>
<li>When you call methods like <code>supplyAsync()</code>, <code>runAsync()</code>, etc., <code>CompletableFuture</code> schedules your task to run on a <strong>different thread</strong> (usually from the ForkJoinPool or a custom executor).</li>
<li>This means your main thread <strong>doesn’t block</strong> and can keep doing other things.</li>
</ul>
</li>
<li>
<p><strong>Supports Chaining and Callbacks</strong></p>
<ul>
<li>You can attach <strong>callbacks</strong> to run <strong>after</strong> the first task completes, using methods like <code>thenApply()</code>, <code>thenAccept()</code>, <code>thenRun()</code>.</li>
<li>Each callback gets triggered <strong>only when the previous task finishes</strong>, forming a chain of asynchronous steps.</li>
</ul>
</li>
<li>
<p><strong>Handles Results and Exceptions</strong></p>
<ul>
<li><code>CompletableFuture</code> keeps track of the result or exception internally.</li>
<li>When a task completes, it stores the <strong>result</strong> or <strong>exception</strong> and automatically calls any dependent callbacks.</li>
<li>If an exception occurs, you can handle it with methods like <code>exceptionally()</code> or <code>handle()</code> without blocking.</li>
</ul>
</li>
<li>
<p><strong>Combines Multiple Futures</strong></p>
<ul>
<li>It allows you to combine multiple <code>CompletableFutures</code> using methods like <code>thenCombine()</code>, <code>allOf()</code>, <code>anyOf()</code>.</li>
<li>This helps coordinate many async tasks and proceed when all or any are done.</li>
</ul>
</li>
</ol>
<h4 id="example">Example</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">example</span>() {
</span></span><span style="display:flex;"><span>    CompletableFuture<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> future <span style="color:#f92672">=</span> CompletableFuture.<span style="color:#a6e22e">supplyAsync</span>(() <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>            delay(1000);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Hello&#34;</span>;
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">thenApply</span>(result <span style="color:#f92672">-&gt;</span> result <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; World!&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    future.<span style="color:#a6e22e">thenRun</span>(() <span style="color:#f92672">-&gt;</span> System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;thenRun : thread = &#34;</span> <span style="color:#f92672">+</span> Thread.<span style="color:#a6e22e">currentThread</span>().<span style="color:#a6e22e">getName</span>()));
</span></span><span style="display:flex;"><span>    future.<span style="color:#a6e22e">thenAccept</span>(result <span style="color:#f92672">-&gt;</span> {
</span></span><span style="display:flex;"><span>        System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;thenAccept : thread = &#34;</span> <span style="color:#f92672">+</span> Thread.<span style="color:#a6e22e">currentThread</span>().<span style="color:#a6e22e">getName</span>());
</span></span><span style="display:flex;"><span>        System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Result = &#34;</span> <span style="color:#f92672">+</span> result);
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    future.<span style="color:#a6e22e">join</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>hashcode() in Java</title>
            <link>https://aamernabi.github.io/posts/java-hashcode/</link>
            <pubDate>Sun, 26 Jul 2020 23:03:02 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/java-hashcode/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;hashCode()&lt;/code&gt; method provides a way to quickly categorize and retrieve objects by generating a unique (or at least well-distributed) integer for each object. It is part of the Object class, so every class in Java inherits it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;hashCode()&lt;/code&gt; is a native method and returns the integer hash code value of the object.&lt;/p&gt;
&lt;p&gt;A hash code is an integer value that is generated by the &lt;code&gt;hashCode()&lt;/code&gt; method. It’s used primarily in hash-based
collections like:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>The <code>hashCode()</code> method provides a way to quickly categorize and retrieve objects by generating a unique (or at least well-distributed) integer for each object. It is part of the Object class, so every class in Java inherits it.</p></blockquote>
<p>The <code>hashCode()</code> is a native method and returns the integer hash code value of the object.</p>
<p>A hash code is an integer value that is generated by the <code>hashCode()</code> method. It’s used primarily in hash-based
collections like:</p>
<ul>
<li><code>HashMap</code></li>
<li><code>HashSet</code></li>
<li><code>Hashtable</code></li>
</ul>
<h3 id="relationship-with-equals">Relationship with equals()</h3>
<p>When you override <code>equals()</code>, you should also override <code>hashCode()</code>, to maintain the general contract:</p>
<blockquote>
<p>If two objects are equal according to the equals() method, they must have the same hash code.</p></blockquote>
<p>If this rule is broken, collections like HashMap or HashSet won’t work correctly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.Objects;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span> {
</span></span><span style="display:flex;"><span>  String name;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> age;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Person</span>(String name, <span style="color:#66d9ef">int</span> age) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> age;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Override equals</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">equals</span>(Object o) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span> <span style="color:#f92672">==</span> o) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(o <span style="color:#66d9ef">instanceof</span> Person)) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>    Person person <span style="color:#f92672">=</span> (Person) o;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> age <span style="color:#f92672">==</span> person.<span style="color:#a6e22e">age</span> <span style="color:#f92672">&amp;&amp;</span> name.<span style="color:#a6e22e">equals</span>(person.<span style="color:#a6e22e">name</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Override hashCode</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">hashCode</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Objects.<span style="color:#a6e22e">hash</span>(name, age);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="why-its-required-to-override-the-hashcode-when-overriding-the-equals-method">Why its required to override the hashcode when overriding the equals method?</h3>
<p>Imagine using <code>HashMap&lt;Key, String&gt;</code> — if <code>equals()</code> says two keys are equal but they have different hash codes,
the map may store them both — which is wrong behavior for a set.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Key</span> {
</span></span><span style="display:flex;"><span>    String id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Key(String id) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> id;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">equals</span>(Object o) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span> <span style="color:#f92672">==</span> o) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>(o <span style="color:#66d9ef">instanceof</span> Key)) <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>        Key key <span style="color:#f92672">=</span> (Key) o;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> id.<span style="color:#a6e22e">equals</span>(key.<span style="color:#a6e22e">id</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// hashCode is NOT overridden</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> agrs) {
</span></span><span style="display:flex;"><span>  Map<span style="color:#f92672">&lt;</span>Key, String<span style="color:#f92672">&gt;</span> map <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;</span>();
</span></span><span style="display:flex;"><span>  map.<span style="color:#a6e22e">put</span>(<span style="color:#66d9ef">new</span> Key(<span style="color:#e6db74">&#34;a&#34;</span>), <span style="color:#e6db74">&#34;value&#34;</span>);
</span></span><span style="display:flex;"><span>  map.<span style="color:#a6e22e">put</span>(<span style="color:#66d9ef">new</span> Key(<span style="color:#e6db74">&#34;a&#34;</span>), <span style="color:#e6db74">&#34;value&#34;</span>);
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Map size: &#34;</span> <span style="color:#f92672">+</span> map.<span style="color:#a6e22e">size</span>());  <span style="color:#75715e">// Output: 2  -&gt; Incorrect behavior</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>What’s wrong here?</p>
<ul>
<li>You’ve overridden equals() to say that two Key(&ldquo;a&rdquo;) objects are equal.</li>
<li>But hashCode() is not overridden, so each Key(&ldquo;a&rdquo;) gets a different hash code (based on object reference).</li>
<li>The map stores them in different buckets, thinking they are different keys.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Fail-fast iterator and Fail-safe iterator</title>
            <link>https://aamernabi.github.io/posts/fail-fast_and_fail-safe_iterator/</link>
            <pubDate>Mon, 20 Jul 2020 15:44:00 +0530</pubDate>
            
            <guid>https://aamernabi.github.io/posts/fail-fast_and_fail-safe_iterator/</guid>
            <description>&lt;h4 id=&#34;fail-fast-iterator&#34;&gt;Fail-fast iterator&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Fail-Fast iterators immediately throw &lt;strong&gt;ConcurrentModificationException&lt;/strong&gt; if there is &lt;em&gt;&lt;strong&gt;structural modification&lt;/strong&gt;&lt;/em&gt; of
the collection.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;A fail-fast iterator in Java is designed to immediately throw a&lt;code&gt;ConcurrentModificationException&lt;/code&gt;if the collection it is
iterating over is structurally modified (elements added or removed) while the iteration is in progress, except when
modification is done through the iterator&amp;rsquo;s own&lt;code&gt;remove()&lt;/code&gt;method. This behavior helps in detecting concurrent
modification issues early, preventing potential data corruption or unexpected behavior.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h4 id="fail-fast-iterator">Fail-fast iterator</h4>
<blockquote>
<p>Fail-Fast iterators immediately throw <strong>ConcurrentModificationException</strong> if there is <em><strong>structural modification</strong></em> of
the collection.</p></blockquote>
<p>A fail-fast iterator in Java is designed to immediately throw a<code>ConcurrentModificationException</code>if the collection it is
iterating over is structurally modified (elements added or removed) while the iteration is in progress, except when
modification is done through the iterator&rsquo;s own<code>remove()</code>method. This behavior helps in detecting concurrent
modification issues early, preventing potential data corruption or unexpected behavior.</p>
<p>Fail-fast iterators work by maintaining a modification counter (<code>modCount</code>) within the collection. Each time the
collection is structurally modified, the<code>modCount</code>is incremented. When an iterator is created, it records the current
value of<code>modCount</code>. Before each iteration (e.g., in the<code>next()</code>method), the iterator checks if the current<code>modCount</code>of
the collection matches the recorded value. If they differ, it indicates that the collection has been modified since the
iterator was created, and a<code>ConcurrentModificationException</code>is thrown.</p>
<p>Iterator on ArrayList, HashMap classes are some examples of fail-fast Iterator.</p>
<p>Examples of collections in Java that use fail-fast iterators include<code>ArrayList</code>,<code>HashMap</code>, and<code>HashSet</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span>(String<span style="color:#f92672">[]</span> args) {
</span></span><span style="display:flex;"><span>  List<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> list <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;</span>(Arrays.<span style="color:#a6e22e">asList</span>(<span style="color:#e6db74">&#34;A&#34;</span>, <span style="color:#e6db74">&#34;B&#34;</span>, <span style="color:#e6db74">&#34;C&#34;</span>));
</span></span><span style="display:flex;"><span>  Iterator<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> iterator <span style="color:#f92672">=</span> list.<span style="color:#a6e22e">iterator</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> (iterator.<span style="color:#a6e22e">hasNext</span>()) {
</span></span><span style="display:flex;"><span>    String element <span style="color:#f92672">=</span> iterator.<span style="color:#a6e22e">next</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (element.<span style="color:#a6e22e">equals</span>(<span style="color:#e6db74">&#34;B&#34;</span>)) {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        list.<span style="color:#a6e22e">remove</span>(<span style="color:#e6db74">&#34;C&#34;</span>); <span style="color:#75715e">// Structural modification outside iterator</span>
</span></span><span style="display:flex;"><span>      } <span style="color:#66d9ef">catch</span> (ConcurrentModificationException e) {
</span></span><span style="display:flex;"><span>        System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Exception: &#34;</span> <span style="color:#f92672">+</span> e);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the example above, attempting to modify the<code>list</code>while iterating through it using the iterator will result in a
<code>ConcurrentModificationException</code>.</p>
<h4 id="fail-safe-iterator">Fail-safe Iterator</h4>
<blockquote>
<p><strong>Fail-Safe iterators</strong> don’t throw any exceptions if a collection is structurally modified while iterating over it.</p></blockquote>
<p>This is because, they operate on the <em><strong>clone</strong></em> of the collection, not on the original collection and that’s why they
are called fail-safe iterators. Iterator on <code>CopyOnWriteArrayList</code>, <code>ConcurrentHashMap</code> classes are examples of fail-safe
Iterator.</p>
]]></content>
        </item>
        
    </channel>
</rss>
